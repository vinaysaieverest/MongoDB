To reference another document's ID in MongoDB, you need to use the `ObjectId` type in your schema. Here's how you can modify your schema to achieve this:

```
const mongoose = require("mongoose")

const class12 = new mongoose.Schema({
  id: Number,
  name: String,
  pre_re: String
})

const undergraduate = new mongoose.Schema({
  id: Number,
  name: String,
  pre_re: [{ type: mongoose.Schema.Types.ObjectId, ref: 'class12' }]
})

const postgraduate = new mongoose.Schema({
  id: Number,
  name: String,
  pre_re: [{ type: mongoose.Schema.Types.ObjectId, ref: 'undergraduate' }]
})

const class12th = mongoose.model("class12", class12)
const Undergraduate = mongoose.model("undergraduate", undergraduate)
const Postgraduate = mongoose.model("postgraduate", postgraduate)

module.exports = { class12th, Undergraduate, Postgraduate }
```

In the modified schema, the `pre_re` field in the `undergraduate` and `postgraduate` schemas is an array of `ObjectId` references to the `class12` model.

When inserting data, you need to pass the `ObjectId` of the referenced document instead of the `id` value. Here's how you can modify your data insertion code:

```
const class12Data = [
  { id: 1, name: "MPC", pre_re: "10th" },
  { id: 2, name: "BiPC", pre_re: "10th" },
  { id: 3, name: "CEC", pre_re: "10th" },
  { id: 4, name: "HEC", pre_re: "10th" },
  { id: 5, name: "MEC", pre_re: "10th" },
  { id: 6, name: "MBiPC", pre_re: "10th" },
  { id: 7, name: "ITI", pre_re: "10th" }
]

const undergraduateData = [
  {
    id: 1,
    name: "BTECH",
    pre_re: [class12th.findById(1)._id, class12th.findById(2)._id, class12th.findById(6)._id]
  },
  {
    id: 2,
    name: "DEGREE",
    pre_re: [
      class12th.findById(1)._id,
      class12th.findById(2)._id,
      class12th.findById(3)._id,
      class12th.findById(4)._id,
      class12th.findById(5)._id,
      class12th.findById(6)._id,
      class12th.findById(7)._id
    ]
  },
  // ... other data
]

const postgraduateData = [
  {
    id: 1,
    name: "MTECH",
    pre_re: [class12th.findById(1)._id, class12th.findById(2)._id]
  },
  {
    id: 2,
    name: "MBA",
    pre_re: [
      class12th.findById(1)._id,
      class12th.findById(2)._id,
      class12th.findById(3)._id,
      class12th.findById(4)._id,
      class12th.findById(5)._id,
      class12th.findById(6)._id,
      class12th.findById(7)._id
    ]
  },
  // ... other data
]

// Insert data into the database
class12th.insertMany(class12Data)
Undergraduate.insertMany(undergraduateData)
Postgraduate.insertMany(postgraduateData)
```

In this modified data insertion code, we're using the `findById` method of the `class12th` model to get the `ObjectId` of the referenced documents and passing them to the `pre_re` field of the `undergraduate` and `postgraduate` data.












const readCSVFile = async (filepath: string): Promise<any[]> => {
    return new Promise((resolve, reject) => {
        const results: any[] = [];
        const stream = fs.createReadStream(filepath)
        stream.pipe(csv())
            .on('data', (data: any) => results.push(data))
            .on('end', () => resolve(results))
            .on('error', (error: string) => reject(error))
    })
}
const coursePath = "/Users/admin/Documents/Courses/course.csv";
const insertRecord = async (data: any) => {
    try {
        const { name, level, prelevel, prename } = data;
        let course = await Course.findOne({ name, level });
        if (!course) {
            course = await Course.create({ name, level });
        }
        if (prelevel && prename) {
            let preCourse = await Course.findOne({ name: prename, level: prelevel });
            if (preCourse) {
                course.prerequisites.push(preCourse._id);
                await course.save();
                console.log(course)
                console.log(Inserted course: ${name} (${level}) with prerequisite: ${prename} (${prelevel}));
            } else {
                console.error(Failed to find or create prerequisite course: ${prename} (${prelevel}));
            }
        } else {
                console.log(Inserted course without prerequisites: ${name} (${level}));
        }
    } catch (error) {
        console.error("Error inserting course:", error);
    }
}
const insert = async () => {
    try {
        const courseData: any[] = await readCSVFile(coursePath);
        for (const data of courseData) {
            await insertRecord(data);
        }
        console.log("All courses and prerequisites inserted successfully");
    } catch (error) {
        console.error("Error inserting courses and prerequisites:", error);
    }
};
 insert();
app.listen(3000,() => {
    console.log(Server is running on http://localhost:);
});